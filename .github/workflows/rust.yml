name: Rust

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  Build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2

    - name: Build (no features enabled)
      run: cargo build --verbose --release

    - name: Build (all features enabled)
      run: cargo build --verbose --all-features --release

    - name: Check semver compatibility (russh)
      uses: obi1kenobi/cargo-semver-checks-action@v2
      with:
        package: russh

    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: russh-${{ runner.os }}
        path: |
          target/release/russh*
          target/release/*.dll
          target/release/*.dylib
          target/release/*.so
        if-no-files-found: error

  Formatting:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Install rustfmt
      run: rustup component add rustfmt

    - name: rustfmt
      run: cargo fmt --check

  Clippy:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Install Clippy
      run: rustup component add clippy

    - name: Clippy (no features enabled)
      run: cargo clippy -- -D warnings

    - name: Clippy (all features enabled)
      run: cargo clippy --all-features -- -D warnings

  Test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Test (no features enabled)
      run: |
        eval `ssh-agent`
        cargo test --verbose
      env:
        RUST_BACKTRACE: 1

    - name: Test (all features enabled)
      run: |
        eval `ssh-agent`
        cargo test --verbose --all-features
      env:
        RUST_BACKTRACE: 1
