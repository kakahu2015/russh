name: "Release"

on:
  push:
    tags:
      - "v*"

jobs:
  tagged-release:
    name: "Tagged Release"
    runs-on: "ubuntu-latest"

    steps:
      - uses: actions/checkout@v2

      - name: Build Release Binaries
        run: |
          cargo build --verbose --release
          cargo build --verbose --all-features --release

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: true
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./target/release/russh
          asset_name: russh-linux
          asset_content_type: application/octet-stream

      - name: Upload Release Asset (All Features)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./target/release/russh
          asset_name: russh-linux-all-features
          asset_content_type: application/octet-stream

  build-windows:
    name: Build Windows Binary
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - name: Build
        run: |
          cargo build --verbose --release
          cargo build --verbose --all-features --release
      - name: Upload Windows Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.tagged-release.outputs.upload_url }}
          asset_path: .\target\release\russh.exe
          asset_name: russh-windows.exe
          asset_content_type: application/octet-stream

  build-macos:
    name: Build macOS Binary
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - name: Build
        run: |
          cargo build --verbose --release
          cargo build --verbose --all-features --release
      - name: Upload macOS Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.tagged-release.outputs.upload_url }}
          asset_path: ./target/release/russh
          asset_name: russh-macos
          asset_content_type: application/octet-stream
